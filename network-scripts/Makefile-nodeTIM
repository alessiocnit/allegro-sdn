
######################################################################
# NETCONF Notification example
# (C) 2006-2009 Tail-f Systems
#
# See the README file for more information
######################################################################

usage:
	@echo "See README file for more instructions"
	@echo "make all      Build all example files"
	@echo "make clean    Remove all built and intermediary files"
	@echo "make start    Start ConfD daemon and example notifier app using the builtin"
	@echo "              replay store"
	@echo "make start2   Start ConfD daemon and example notifier app using an external"
	@echo "              replay store"
	@echo "make stop     Stop any ConfD daemon and example notifier app"
	@echo "make query    Run NETCONF query against ConfD"
	@echo "make cli     Start the CONFD Command Line Interface"
	@echo "make cli-c   Start the CONFD Command Line Interface, C-style"
	@echo "make cli-j   Start the CONFD Command Line Interface, J-style"

######################################################################
# Where is ConfD installed? Make sure CONFD_DIR points it out
CONFD_DIR ?= ../../..

# Include standard ConfD build definitions and rules
include $(CONFD_DIR)/src/confd/build/include.mk

# In case CONFD_DIR is not set (correctly), this rule will trigger
$(CONFD_DIR)/src/confd/build/include.mk:
	@echo 'Where is ConfD installed? Set $$CONFD_DIR to point it out!'
	@echo ''

######################################################################
# Example specific definitions and rules
CONFD_FLAGS = --addloadpath $(CONFD_DIR)/etc/confd
START_FLAGS ?=


CFLAGS	+= $(EXPAT_INC)
LIBS	+= $(EXPAT_LIB)

#HFXS = ietf-yang-types.h fec-types.h modulation-formats.h transponder.h telemetry.h filter.h system-information.h mh-types.h ports.h connections.h
HFXS = ietf-yang-types.h \
	org-openroadm-user-mgmt.h\
	org-openroadm-common-types.h\
	org-openroadm-resource-types.h\
	org-openroadm-switching-pool-types.h\
	org-openroadm-device.h\
	org-openroadm-swdl.h\
	org-openroadm-port-types.h\
	org-openroadm-physical-types.h\
	org-openroadm-interfaces.h\
        org-openroadm-common-node-types.h \
        org-openroadm-common-link-types.h \
        org-openroadm-common-state-types.h \
        org-openroadm-common-alarm-pm-types.h \
        org-openroadm-common-amplifier-types.h \
        org-openroadm-common-equipment-types.h \
        org-openroadm-common-optical-channel-types.h \
        org-openroadm-device-types.h \
	org-openroadm-media-channel-interfaces.h\
	org-openroadm-network-media-channel-interfaces.h\
	org-openroadm-equipment-states-types.h

SRC = iris_driver.c

OBJ = $(SRC:%.c=%.o)


#all: notifier ietf-yang-types.fxs fec-types.fxs modulation-formats.fxs transponder.fxs telemetry.fxs filter.fxs system-information.fxs mh-types.fxs ports.fxs  connections.fxs $(CDB_DIR) ssh-keydir

all: notifier\
	ietf-yang-types.fxs\
	org-openroadm-user-mgmt.fxs\
	org-openroadm-common-types.fxs\
	org-openroadm-resource-types.fxs\
	org-openroadm-switching-pool-types.fxs\
	org-openroadm-device.fxs\
	org-openroadm-swdl.fxs\
	org-openroadm-port-types.fxs\
	org-openroadm-physical-types.fxs\
	org-openroadm-interfaces.fxs\
        org-openroadm-common-node-types.fxs \
        org-openroadm-common-link-types.fxs \
        org-openroadm-common-state-types.fxs \
        org-openroadm-common-alarm-pm-types.fxs \
        org-openroadm-common-amplifier-types.fxs \
        org-openroadm-common-equipment-types.fxs \
        org-openroadm-common-optical-channel-types.fxs \
        org-openroadm-device-types.fxs \
	org-openroadm-media-channel-interfaces.fxs\
	org-openroadm-network-media-channel-interfaces.fxs\
	org-openroadm-equipment-states-types.fxs\
	$(CDB_DIR) ssh-keydir
	@echo "Build complete"

#notifier: notifier.c transponder.h telemetry.h filter.h system-information.h $(OBJ)
notifier: notifier.c org-openroadm-device.h $(OBJ)
	 $(CC) notifier.c org-openroadm-device.h $(OBJ) $(LIBS) $(CFLAGS) -o $@

%.o: %.c
	@echo 'Building file: $<'
	$(CC) -c $< $(CFLAGS) -o $@
	@echo 'Finished building: $<'
	@echo ' '

%.h: %.fxs
	$(CONFDC) --emit-h $*.h $<

######################################################################
init:
	@echo 'Initialize database'
	cp nodeTIM.xml confd-cdb/
clean:	iclean
	-rm -rf notifier notifier_builtin_replay_store $(HFXS) interface.*\
		confd_prim.conf 2> /dev/null || true

start:  stop 
	sed 's/[ \t]*<!-- enableBuiltinReplayStore -->/          <enabled>true<\/enabled>/' confd.conf > confd_prim.conf
	$(CONFD) -c ./confd_prim.conf $(CONFD_FLAGS)
	LD_LIBRARY_PATH=$(CONFD_SO) ./notifier_builtin_replay_store -t

startw:  stop 
	sed 's/[ \t]*<!-- enableBuiltinReplayStore -->/          <enabled>true<\/enabled>/' confd.conf > confd_prim.conf
	$(CONFD) -c ./confd_prim.conf $(CONFD_FLAGS) -w
	LD_LIBRARY_PATH=$(CONFD_SO) ./notifier_builtin_replay_store -t

start2:  stop
	sed 's/[ \t]*<!-- enableBuiltinReplayStore -->/          <enabled>false<\/enabled>/' confd.conf > confd_prim.conf
	$(CONFD) -c ./confd_prim.conf $(CONFD_FLAGS)
	LD_LIBRARY_PATH=$(CONFD_SO) ./notifier -t

######################################################################
stop:
	### Stopping any confd daemon
	$(CONFD) --stop || true

######################################################################
query:
	$(CONFD_DIR)/bin/netconf-console-tcp --get -x netconf

subscribe:
	$(CONFD_DIR)/bin/netconf-console-tcp -s all sub.xml

replay:
	$(CONFD_DIR)/bin/netconf-console-tcp -s all replay.xml

subscribe-netconf:
	$(CONFD_DIR)/bin/netconf-console-tcp --create-subscription=NETCONF

edit-config1:
	$(CONFD_DIR)/bin/netconf-console-tcp --edit-config=edit1.xml

edit-config2:
	$(CONFD_DIR)/bin/netconf-console-tcp --edit-config=edit2.xml

rpc-outage:
	$(CONFD_DIR)/bin/netconf-console-tcp rpc-outage2.xml

######################################################################

cli:
	$(CONFD_DIR)/bin/confd_cli --user=admin --groups=admin \
		--interactive || echo Exit

cli-c:
	$(CONFD_DIR)/bin/confd_cli -C --user=admin --groups=admin \
		--interactive || echo Exit

cli-j:
	$(CONFD_DIR)/bin/confd_cli -J --user=admin --groups=admin \
		--interactive || echo Exit
